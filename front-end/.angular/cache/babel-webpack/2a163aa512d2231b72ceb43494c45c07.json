{"ast":null,"code":"import _asyncToGenerator from \"E:/Formation/Laboratoire/Angular/Angular/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { countries } from '../_data/country-data-store';\nimport { ValidationService } from '../_services/validation.service';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, authService, router) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.popup = false;\n    this.countryList = countries;\n    this.inscriptionForm = this.formBuilder.group({\n      Prenom: ['', [Validators.required]],\n      Nom: ['', [Validators.required]],\n      Email: ['', [Validators.required, ValidationService.emailValidator]],\n      Pays: ['', [Validators.required]],\n      Telephone: ['', [Validators.required]],\n      Password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(100)]]\n    });\n  }\n\n  ngOnInit() {}\n\n  redirectToHome() {\n    this.router.navigateByUrl(\"\");\n  }\n\n  register(form) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let res = false;\n      form.value.isAdmin = false;\n      form.value.Password = yield sha256(form.value.Password);\n\n      _this.authService.getAll().toPromise().then(resp => {\n        resp.forEach(element => {\n          if (element.Email === form.value.Email) {\n            res = true;\n          }\n        });\n      }).finally(() => {\n        if (res === false) {\n          _this.authService.register(form.value).toPromise().then().finally(() => {\n            _this.router.navigateByUrl(\"\");\n          });\n        } else {\n          _this.router.navigateByUrl(\"registerError\");\n        }\n      });\n    })();\n  }\n\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.sass']\n})], RegisterComponent);\nexport { RegisterComponent };\n\nfunction sha256(_x) {\n  return _sha.apply(this, arguments);\n}\n\nfunction _sha() {\n  _sha = _asyncToGenerator(function* (message) {\n    const msgBuffer = new TextEncoder().encode(message);\n    const hashBuffer = yield crypto.subtle.digest('SHA-256', msgBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n  });\n  return _sha.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/Formation/Laboratoire/Angular/Angular/front-end/src/app/register/register.component.ts"],"names":["__decorate","Component","Validators","countries","ValidationService","RegisterComponent","constructor","formBuilder","authService","router","popup","countryList","inscriptionForm","group","Prenom","required","Nom","Email","emailValidator","Pays","Telephone","Password","minLength","maxLength","ngOnInit","redirectToHome","navigateByUrl","register","form","res","value","isAdmin","sha256","getAll","toPromise","then","resp","forEach","element","finally","selector","templateUrl","styleUrls","message","msgBuffer","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { countries } from '../_data/country-data-store';\r\nimport { ValidationService } from '../_services/validation.service';\r\nlet RegisterComponent = class RegisterComponent {\r\n    constructor(formBuilder, authService, router) {\r\n        this.formBuilder = formBuilder;\r\n        this.authService = authService;\r\n        this.router = router;\r\n        this.popup = false;\r\n        this.countryList = countries;\r\n        this.inscriptionForm = this.formBuilder.group({\r\n            Prenom: ['', [Validators.required]],\r\n            Nom: ['', [Validators.required]],\r\n            Email: ['', [Validators.required, ValidationService.emailValidator]],\r\n            Pays: ['', [Validators.required]],\r\n            Telephone: ['', [Validators.required]],\r\n            Password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(100)]],\r\n        });\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    redirectToHome() {\r\n        this.router.navigateByUrl(\"\");\r\n    }\r\n    async register(form) {\r\n        let res = false;\r\n        form.value.isAdmin = false;\r\n        form.value.Password = await sha256(form.value.Password);\r\n        this.authService.getAll().toPromise().then(resp => {\r\n            resp.forEach(element => {\r\n                if (element.Email === form.value.Email) {\r\n                    res = true;\r\n                }\r\n            });\r\n        }).finally(() => {\r\n            if (res === false) {\r\n                this.authService.register(form.value).toPromise().then().finally(() => {\r\n                    this.router.navigateByUrl(\"\");\r\n                });\r\n            }\r\n            else {\r\n                this.router.navigateByUrl(\"registerError\");\r\n            }\r\n        });\r\n    }\r\n};\r\nRegisterComponent = __decorate([\r\n    Component({\r\n        selector: 'app-register',\r\n        templateUrl: './register.component.html',\r\n        styleUrls: ['./register.component.sass']\r\n    })\r\n], RegisterComponent);\r\nexport { RegisterComponent };\r\nasync function sha256(message) {\r\n    const msgBuffer = new TextEncoder().encode(message);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n    return hashHex;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}