{"ast":null,"code":"import _asyncToGenerator from \"E:/Formation/Laboratoire/Angular/Angular/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { sha256 } from '../_tools/password-hash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class AuthService {\n  constructor(httpClient, sessionStorage) {\n    this.httpClient = httpClient;\n    this.sessionStorage = sessionStorage;\n    this.AUTH_SERVER = \"http://127.0.0.1:5400\";\n  }\n\n  register(user) {\n    return this.httpClient.post(this.AUTH_SERVER + \"/api/user\", user);\n  }\n\n  getAll() {\n    return this.httpClient.get(this.AUTH_SERVER + \"/api/user\");\n  }\n\n  getByEmail(mail) {\n    return this.httpClient.get(this.AUTH_SERVER + \"/api/user/\" + mail);\n  }\n\n  login(mail, pass) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield sha256(pass).finally(() => {\n        _this.getByEmail(mail).toPromise();\n      });\n    })();\n  }\n\n  logout() {\n    this.sessionStorage.delete('user');\n  }\n\n  isAuthenticated() {\n    if (this.sessionStorage.get('user') !== null) return true;\n    return false;\n  }\n\n  getUser() {\n    return this.sessionStorage.get('user');\n  }\n\n  setUser(user) {\n    this.sessionStorage.set('user', user);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/Formation/Laboratoire/Angular/Angular/front-end/src/app/_services/auth.service.ts"],"names":["sha256","i0","i1","i2","AuthService","constructor","httpClient","sessionStorage","AUTH_SERVER","register","user","post","getAll","get","getByEmail","mail","login","pass","finally","toPromise","logout","delete","isAuthenticated","getUser","setUser","set","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","SessionStorageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,MAAT,QAAuB,yBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,UAAD,EAAaC,cAAb,EAA6B;AACpC,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,WAAL,GAAmB,uBAAnB;AACH;;AACDC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,WAAO,KAAKJ,UAAL,CAAgBK,IAAhB,CAAqB,KAAKH,WAAL,GAAmB,WAAxC,EAAqDE,IAArD,CAAP;AACH;;AACDE,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKN,UAAL,CAAgBO,GAAhB,CAAoB,KAAKL,WAAL,GAAmB,WAAvC,CAAP;AACH;;AACDM,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAO,KAAKT,UAAL,CAAgBO,GAAhB,CAAoB,KAAKL,WAAL,GAAmB,YAAnB,GAAkCO,IAAtD,CAAP;AACH;;AACKC,EAAAA,KAAK,CAACD,IAAD,EAAOE,IAAP,EAAa;AAAA;;AAAA;AACpB,mBAAajB,MAAM,CAACiB,IAAD,CAAN,CAAaC,OAAb,CAAqB,MAAM;AAAE,QAAA,KAAI,CAACJ,UAAL,CAAgBC,IAAhB,EAAsBI,SAAtB;AAAoC,OAAjE,CAAb;AADoB;AAEvB;;AACDC,EAAAA,MAAM,GAAG;AACL,SAAKb,cAAL,CAAoBc,MAApB,CAA2B,MAA3B;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKf,cAAL,CAAoBM,GAApB,CAAwB,MAAxB,MAAoC,IAAxC,EACI,OAAO,IAAP;AACJ,WAAO,KAAP;AACH;;AACDU,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKhB,cAAL,CAAoBM,GAApB,CAAwB,MAAxB,CAAP;AACH;;AACDW,EAAAA,OAAO,CAACd,IAAD,EAAO;AACV,SAAKH,cAAL,CAAoBkB,GAApB,CAAwB,MAAxB,EAAgCf,IAAhC;AACH;;AA/BoB;;AAiCzBN,WAAW,CAACsB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIxB,WAAV,EAAuBH,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,UAAf,CAAvB,EAAmD7B,EAAE,CAAC4B,QAAH,CAAY1B,EAAE,CAAC4B,qBAAf,CAAnD,CAAP;AAAmG,CAAxJ;;AACA3B,WAAW,CAAC4B,KAAZ,GAAoB,aAAc/B,EAAE,CAACgC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE9B,WAAT;AAAsB+B,EAAAA,OAAO,EAAE/B,WAAW,CAACsB,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { sha256 } from '../_tools/password-hash';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./session-storage.service\";\r\nexport class AuthService {\r\n    constructor(httpClient, sessionStorage) {\r\n        this.httpClient = httpClient;\r\n        this.sessionStorage = sessionStorage;\r\n        this.AUTH_SERVER = \"http://127.0.0.1:5400\";\r\n    }\r\n    register(user) {\r\n        return this.httpClient.post(this.AUTH_SERVER + \"/api/user\", user);\r\n    }\r\n    getAll() {\r\n        return this.httpClient.get(this.AUTH_SERVER + \"/api/user\");\r\n    }\r\n    getByEmail(mail) {\r\n        return this.httpClient.get(this.AUTH_SERVER + \"/api/user/\" + mail);\r\n    }\r\n    async login(mail, pass) {\r\n        return await sha256(pass).finally(() => { this.getByEmail(mail).toPromise(); });\r\n    }\r\n    logout() {\r\n        this.sessionStorage.delete('user');\r\n    }\r\n    isAuthenticated() {\r\n        if (this.sessionStorage.get('user') !== null)\r\n            return true;\r\n        return false;\r\n    }\r\n    getUser() {\r\n        return this.sessionStorage.get('user');\r\n    }\r\n    setUser(user) {\r\n        this.sessionStorage.set('user', user);\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}