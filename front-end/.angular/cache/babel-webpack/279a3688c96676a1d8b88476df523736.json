{"ast":null,"code":"import _asyncToGenerator from \"E:/Formation/Laboratoire/Angular/Angular/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport { sha256 } from '../_tools/password-hash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class AuthService {\n  constructor(httpClient, sessionStorage) {\n    this.httpClient = httpClient;\n    this.sessionStorage = sessionStorage;\n    this.AUTH_SERVER = \"http://127.0.0.1:5400\";\n    this.isLogged = new BehaviorSubject(false);\n  }\n\n  register(user) {\n    return this.httpClient.post(this.AUTH_SERVER + \"/api/user\", user);\n  }\n\n  getAll() {\n    return this.httpClient.get(this.AUTH_SERVER + \"/api/user\");\n  }\n\n  getByEmail(mail) {\n    return this.httpClient.get(this.AUTH_SERVER + \"/api/user/\" + mail);\n  }\n\n  getToken(mail, pass) {\n    return this.httpClient.post(this.AUTH_SERVER + \"/api/login\", {\n      Email: mail,\n      Password: pass\n    });\n  }\n\n  login(form) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      form.value.Password = yield sha256(form.value.Password).finally(() => {\n        _this.getByEmail(form.value.Email).toPromise().then(resp => {\n          if (resp.Password == form.value.Password) {\n            _this.getToken(form.value.Email, form.value.Password).toPromise().then(r => {\n              _this.setStoredToken(JSON.stringify(r));\n            });\n\n            _this.setUser(JSON.stringify(resp));\n\n            _this.isLogged.next(true);\n          }\n        });\n      });\n    })();\n  }\n\n  logout() {\n    this.isLogged.next(false);\n    this.sessionStorage.delete('user');\n    this.sessionStorage.delete('accessToken');\n  }\n\n  isAuthenticated() {\n    return this.isLogged.value;\n  }\n\n  getUser() {\n    return this.sessionStorage.get('user');\n  }\n\n  setUser(user) {\n    this.sessionStorage.set('user', user);\n  }\n\n  getStoredToken() {\n    return this.sessionStorage.get('accessToken');\n  }\n\n  setStoredToken(accessToken) {\n    this.sessionStorage.set('accessToken', accessToken);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/Formation/Laboratoire/Angular/Angular/front-end/src/app/_services/auth.service.ts"],"names":["BehaviorSubject","sha256","i0","i1","i2","AuthService","constructor","httpClient","sessionStorage","AUTH_SERVER","isLogged","register","user","post","getAll","get","getByEmail","mail","getToken","pass","Email","Password","login","form","value","finally","toPromise","then","resp","r","setStoredToken","JSON","stringify","setUser","next","logout","delete","isAuthenticated","getUser","set","getStoredToken","accessToken","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","SessionStorageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport { sha256 } from '../_tools/password-hash';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./session-storage.service\";\r\nexport class AuthService {\r\n    constructor(httpClient, sessionStorage) {\r\n        this.httpClient = httpClient;\r\n        this.sessionStorage = sessionStorage;\r\n        this.AUTH_SERVER = \"http://127.0.0.1:5400\";\r\n        this.isLogged = new BehaviorSubject(false);\r\n    }\r\n    register(user) {\r\n        return this.httpClient.post(this.AUTH_SERVER + \"/api/user\", user);\r\n    }\r\n    getAll() {\r\n        return this.httpClient.get(this.AUTH_SERVER + \"/api/user\");\r\n    }\r\n    getByEmail(mail) {\r\n        return this.httpClient.get(this.AUTH_SERVER + \"/api/user/\" + mail);\r\n    }\r\n    getToken(mail, pass) {\r\n        return this.httpClient.post(this.AUTH_SERVER + \"/api/login\", { Email: mail, Password: pass });\r\n    }\r\n    async login(form) {\r\n        form.value.Password = await sha256(form.value.Password).finally(() => {\r\n            this.getByEmail(form.value.Email).toPromise().then(resp => {\r\n                if (resp.Password == form.value.Password) {\r\n                    this.getToken(form.value.Email, form.value.Password).toPromise().then((r) => {\r\n                        this.setStoredToken(JSON.stringify(r));\r\n                    });\r\n                    this.setUser(JSON.stringify(resp));\r\n                    this.isLogged.next(true);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    logout() {\r\n        this.isLogged.next(false);\r\n        this.sessionStorage.delete('user');\r\n        this.sessionStorage.delete('accessToken');\r\n    }\r\n    isAuthenticated() {\r\n        return this.isLogged.value;\r\n    }\r\n    getUser() {\r\n        return this.sessionStorage.get('user');\r\n    }\r\n    setUser(user) {\r\n        this.sessionStorage.set('user', user);\r\n    }\r\n    getStoredToken() {\r\n        return this.sessionStorage.get('accessToken');\r\n    }\r\n    setStoredToken(accessToken) {\r\n        this.sessionStorage.set('accessToken', accessToken);\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}