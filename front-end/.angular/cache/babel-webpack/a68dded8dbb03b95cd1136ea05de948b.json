{"ast":null,"code":"import _asyncToGenerator from \"E:/Formation/Laboratoire/Angular/Angular/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport { sha256 } from '../_tools/password-hash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./session-storage.service\";\nexport class AuthService {\n  constructor(httpClient, sessionStorage) {\n    this.httpClient = httpClient;\n    this.sessionStorage = sessionStorage;\n    this.AUTH_SERVER = \"http://127.0.0.1:5400\";\n    this.isLogged = new BehaviorSubject(false);\n  }\n\n  register(user) {\n    return this.httpClient.post(this.AUTH_SERVER + \"/api/user\", user);\n  }\n\n  getAll() {\n    return this.httpClient.get(this.AUTH_SERVER + \"/api/user\");\n  }\n\n  getByEmail(mail) {\n    return this.httpClient.get(this.AUTH_SERVER + \"/api/user/\" + mail);\n  }\n\n  getToken(user) {\n    return this.httpClient.post(this.AUTH_SERVER + \"/api/login\", user);\n  }\n\n  refreshLogin() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let user = JSON.parse(_this.getUser());\n      return yield _this.login(user.Email, user.Password, false);\n    })();\n  }\n\n  login(mail, pass, hash = true) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (hash) {\n        pass = yield sha256(pass).finally(() => {\n          _this2.getByEmail(mail).toPromise().then(resp => {\n            if (resp.Password == pass) {\n              _this2.setUser(JSON.stringify(resp));\n\n              _this2.getToken(resp).toPromise().then(tok => {\n                _this2.setStoredToken(JSON.stringify(tok));\n              });\n\n              _this2.isLogged.next(true);\n            }\n          });\n        });\n      } else {\n        _this2.getByEmail(mail).toPromise().then(resp => {\n          if (resp.Password == pass) {\n            _this2.setUser(JSON.stringify(resp));\n\n            _this2.isLogged.next(true);\n          }\n        });\n      }\n    })();\n  }\n\n  verifyToken() {\n    let user = this.getUser();\n  }\n\n  logout() {\n    this.isLogged.next(false);\n    this.sessionStorage.delete('user');\n    this.sessionStorage.delete('accessToken');\n  }\n\n  isAuthenticated() {\n    return this.isLogged.value;\n  }\n\n  getUser() {\n    return this.sessionStorage.get('user');\n  }\n\n  setUser(user) {\n    this.sessionStorage.set('user', user);\n  }\n\n  getStoredToken() {\n    return this.sessionStorage.get('accessToken');\n  }\n\n  setStoredToken(token) {\n    this.sessionStorage.set('accessToken', token);\n  }\n\n  isUserStillAdmin() {\n    return this.refreshLogin().then(() => {\n      let user = JSON.parse(this.getUser());\n\n      if (user !== null && user.isAdmin) {\n        return true;\n      } else if (user === null || user !== null && !user.isAdmin) {\n        return false;\n      }\n\n      return false;\n    });\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/Formation/Laboratoire/Angular/Angular/front-end/src/app/_services/auth.service.ts"],"names":["BehaviorSubject","sha256","i0","i1","i2","AuthService","constructor","httpClient","sessionStorage","AUTH_SERVER","isLogged","register","user","post","getAll","get","getByEmail","mail","getToken","refreshLogin","JSON","parse","getUser","login","Email","Password","pass","hash","finally","toPromise","then","resp","setUser","stringify","tok","setStoredToken","next","verifyToken","logout","delete","isAuthenticated","value","set","getStoredToken","token","isUserStillAdmin","isAdmin","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","SessionStorageService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,SAASA,eAAT,QAAgC,MAAhC;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,UAAD,EAAaC,cAAb,EAA6B;AACpC,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,WAAL,GAAmB,uBAAnB;AACA,SAAKC,QAAL,GAAgB,IAAIV,eAAJ,CAAoB,KAApB,CAAhB;AACH;;AACDW,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,WAAO,KAAKL,UAAL,CAAgBM,IAAhB,CAAqB,KAAKJ,WAAL,GAAmB,WAAxC,EAAqDG,IAArD,CAAP;AACH;;AACDE,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKP,UAAL,CAAgBQ,GAAhB,CAAoB,KAAKN,WAAL,GAAmB,WAAvC,CAAP;AACH;;AACDO,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAO,KAAKV,UAAL,CAAgBQ,GAAhB,CAAoB,KAAKN,WAAL,GAAmB,YAAnB,GAAkCQ,IAAtD,CAAP;AACH;;AACDC,EAAAA,QAAQ,CAACN,IAAD,EAAO;AACX,WAAO,KAAKL,UAAL,CAAgBM,IAAhB,CAAqB,KAAKJ,WAAL,GAAmB,YAAxC,EAAsDG,IAAtD,CAAP;AACH;;AACKO,EAAAA,YAAY,GAAG;AAAA;;AAAA;AACjB,UAAIP,IAAI,GAAGQ,IAAI,CAACC,KAAL,CAAW,KAAI,CAACC,OAAL,EAAX,CAAX;AACA,mBAAa,KAAI,CAACC,KAAL,CAAWX,IAAI,CAACY,KAAhB,EAAuBZ,IAAI,CAACa,QAA5B,EAAsC,KAAtC,CAAb;AAFiB;AAGpB;;AACKF,EAAAA,KAAK,CAACN,IAAD,EAAOS,IAAP,EAAaC,IAAI,GAAG,IAApB,EAA0B;AAAA;;AAAA;AACjC,UAAIA,IAAJ,EAAU;AACND,QAAAA,IAAI,SAASzB,MAAM,CAACyB,IAAD,CAAN,CAAaE,OAAb,CAAqB,MAAM;AACpC,UAAA,MAAI,CAACZ,UAAL,CAAgBC,IAAhB,EAAsBY,SAAtB,GAAkCC,IAAlC,CAAuCC,IAAI,IAAI;AAC3C,gBAAIA,IAAI,CAACN,QAAL,IAAiBC,IAArB,EAA2B;AACvB,cAAA,MAAI,CAACM,OAAL,CAAaZ,IAAI,CAACa,SAAL,CAAeF,IAAf,CAAb;;AACA,cAAA,MAAI,CAACb,QAAL,CAAca,IAAd,EAAoBF,SAApB,GAAgCC,IAAhC,CAAqCI,GAAG,IAAI;AACxC,gBAAA,MAAI,CAACC,cAAL,CAAoBf,IAAI,CAACa,SAAL,CAAeC,GAAf,CAApB;AACH,eAFD;;AAGA,cAAA,MAAI,CAACxB,QAAL,CAAc0B,IAAd,CAAmB,IAAnB;AACH;AACJ,WARD;AASH,SAVY,CAAb;AAWH,OAZD,MAaK;AACD,QAAA,MAAI,CAACpB,UAAL,CAAgBC,IAAhB,EAAsBY,SAAtB,GAAkCC,IAAlC,CAAuCC,IAAI,IAAI;AAC3C,cAAIA,IAAI,CAACN,QAAL,IAAiBC,IAArB,EAA2B;AACvB,YAAA,MAAI,CAACM,OAAL,CAAaZ,IAAI,CAACa,SAAL,CAAeF,IAAf,CAAb;;AACA,YAAA,MAAI,CAACrB,QAAL,CAAc0B,IAAd,CAAmB,IAAnB;AACH;AACJ,SALD;AAMH;AArBgC;AAsBpC;;AACDC,EAAAA,WAAW,GAAG;AACV,QAAIzB,IAAI,GAAG,KAAKU,OAAL,EAAX;AACH;;AACDgB,EAAAA,MAAM,GAAG;AACL,SAAK5B,QAAL,CAAc0B,IAAd,CAAmB,KAAnB;AACA,SAAK5B,cAAL,CAAoB+B,MAApB,CAA2B,MAA3B;AACA,SAAK/B,cAAL,CAAoB+B,MAApB,CAA2B,aAA3B;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,WAAO,KAAK9B,QAAL,CAAc+B,KAArB;AACH;;AACDnB,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKd,cAAL,CAAoBO,GAApB,CAAwB,MAAxB,CAAP;AACH;;AACDiB,EAAAA,OAAO,CAACpB,IAAD,EAAO;AACV,SAAKJ,cAAL,CAAoBkC,GAApB,CAAwB,MAAxB,EAAgC9B,IAAhC;AACH;;AACD+B,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKnC,cAAL,CAAoBO,GAApB,CAAwB,aAAxB,CAAP;AACH;;AACDoB,EAAAA,cAAc,CAACS,KAAD,EAAQ;AAClB,SAAKpC,cAAL,CAAoBkC,GAApB,CAAwB,aAAxB,EAAuCE,KAAvC;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAK1B,YAAL,GAAoBW,IAApB,CAAyB,MAAM;AAClC,UAAIlB,IAAI,GAAGQ,IAAI,CAACC,KAAL,CAAW,KAAKC,OAAL,EAAX,CAAX;;AACA,UAAIV,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACkC,OAA1B,EAAmC;AAC/B,eAAO,IAAP;AACH,OAFD,MAGK,IAAIlC,IAAI,KAAK,IAAT,IAAkBA,IAAI,KAAK,IAAT,IAAiB,CAACA,IAAI,CAACkC,OAA7C,EAAuD;AACxD,eAAO,KAAP;AACH;;AACD,aAAO,KAAP;AACH,KATM,CAAP;AAUH;;AAhFoB;;AAkFzBzC,WAAW,CAAC0C,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI5C,WAAV,EAAuBH,EAAE,CAACgD,QAAH,CAAY/C,EAAE,CAACgD,UAAf,CAAvB,EAAmDjD,EAAE,CAACgD,QAAH,CAAY9C,EAAE,CAACgD,qBAAf,CAAnD,CAAP;AAAmG,CAAxJ;;AACA/C,WAAW,CAACgD,KAAZ,GAAoB,aAAcnD,EAAE,CAACoD,kBAAH,CAAsB;AAAEV,EAAAA,KAAK,EAAEvC,WAAT;AAAsBkD,EAAAA,OAAO,EAAElD,WAAW,CAAC0C,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport { sha256 } from '../_tools/password-hash';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./session-storage.service\";\r\nexport class AuthService {\r\n    constructor(httpClient, sessionStorage) {\r\n        this.httpClient = httpClient;\r\n        this.sessionStorage = sessionStorage;\r\n        this.AUTH_SERVER = \"http://127.0.0.1:5400\";\r\n        this.isLogged = new BehaviorSubject(false);\r\n    }\r\n    register(user) {\r\n        return this.httpClient.post(this.AUTH_SERVER + \"/api/user\", user);\r\n    }\r\n    getAll() {\r\n        return this.httpClient.get(this.AUTH_SERVER + \"/api/user\");\r\n    }\r\n    getByEmail(mail) {\r\n        return this.httpClient.get(this.AUTH_SERVER + \"/api/user/\" + mail);\r\n    }\r\n    getToken(user) {\r\n        return this.httpClient.post(this.AUTH_SERVER + \"/api/login\", user);\r\n    }\r\n    async refreshLogin() {\r\n        let user = JSON.parse(this.getUser());\r\n        return await this.login(user.Email, user.Password, false);\r\n    }\r\n    async login(mail, pass, hash = true) {\r\n        if (hash) {\r\n            pass = await sha256(pass).finally(() => {\r\n                this.getByEmail(mail).toPromise().then(resp => {\r\n                    if (resp.Password == pass) {\r\n                        this.setUser(JSON.stringify(resp));\r\n                        this.getToken(resp).toPromise().then(tok => {\r\n                            this.setStoredToken(JSON.stringify(tok));\r\n                        });\r\n                        this.isLogged.next(true);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            this.getByEmail(mail).toPromise().then(resp => {\r\n                if (resp.Password == pass) {\r\n                    this.setUser(JSON.stringify(resp));\r\n                    this.isLogged.next(true);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    verifyToken() {\r\n        let user = this.getUser();\r\n    }\r\n    logout() {\r\n        this.isLogged.next(false);\r\n        this.sessionStorage.delete('user');\r\n        this.sessionStorage.delete('accessToken');\r\n    }\r\n    isAuthenticated() {\r\n        return this.isLogged.value;\r\n    }\r\n    getUser() {\r\n        return this.sessionStorage.get('user');\r\n    }\r\n    setUser(user) {\r\n        this.sessionStorage.set('user', user);\r\n    }\r\n    getStoredToken() {\r\n        return this.sessionStorage.get('accessToken');\r\n    }\r\n    setStoredToken(token) {\r\n        this.sessionStorage.set('accessToken', token);\r\n    }\r\n    isUserStillAdmin() {\r\n        return this.refreshLogin().then(() => {\r\n            let user = JSON.parse(this.getUser());\r\n            if (user !== null && user.isAdmin) {\r\n                return true;\r\n            }\r\n            else if (user === null || (user !== null && !user.isAdmin)) {\r\n                return false;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageService)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}